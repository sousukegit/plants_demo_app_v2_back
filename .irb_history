Time.zone.name
Time.current
Time.now
I18n.local
I18n.locale
exit
bundle info hirb
Hirb.enable
exit
puts Hirb::Helpers::Table.render [[1,2], [2,3]]
puts Hirb::Helpers::Table.render [{:age=>10, :weight=>100}, {:age=>80, :weight=>500}]
exit
exec
exit
User.new
user = User.new
Hirb.diable
Hirb.disable
user = User.new
user.save
user.errors.full_messages
I18n.t("activerecord.attributes.user")
user.password = "aaaaaa"
reload!
use = User.new
use.password = "aaaaa"

use.name = "aaa"
exit
user = User.new
Hirb.disable
user = User.new
user.password="aaaaaaa"
exit
user = User.new
Hirb.disable
user = User.new
user.password="aaaaaa"
exit
user = User.new
Hirb.disable
user = User.new
user.password=\
user.password="aaaaa"

user.errors.full_messages
user.password=\
user.password="aaaaaaaaaaaaaaaaaaaaaaaa"
user.save
user.errors.full_messages
user.password=\
user.password="あああああああああああああああああああ"
user.save
user.errors.full_messages
exit
User.create(email:"a@a.a")
reload!
User.create(email:"a@a.a")
reload!
User.create(email:"a@a.a")
User.create(email:"a@a.a")
User.create(email:"a@a.a")
reload!
User.create(email:"a@a.a")
exit
User.create(email:"a@a.a")
user = User.new
User.create(email:"b@a.a")
reload!
User.create(email:"b@a.a")
exit
User.create(email:"b@a.a")
User.create(email:"b@a.a")
User.create(email:"b@a.a")
reload!
User.create(email:"b@a.a")
User.create(email:"b@a.a")
exit
User.new(email:'a@a.a')
User.new(email:'b@a.a')
exit
User.create(email:"a@a.a")
User.create(email:"a@a.a")
exit
User.create(email:"a@a.a")
User.create(email:"a@a.a")
relo

User.create(email:"a@a.a")
exit
User.create(email:"a@a.a")
User.create(email:"a@a.b")
User.create(email:"a@a.b")
User.create(email:"a@a.b")
User.create(email:"a@a.b")
exit
exit
User.create(email:"a@a.b")
User.create(email:"a@a.a")
User.create(name:"aaaa")
User.sava
User.save
user  =User.new(name:'ああああ')
Hirb.disable
user  =User.new(name:'ああああ')
User.save
user.save
User.create(email:"a@a.a")
User.create(email:"a@a.a")
User.create(email:"a@a.a")
reload!
User.create(email:"a@a.a")
exit
User.create(email:"a@a.a")
User.create(email:"a@a.a")
User.create(email:"a@a.a")
exit
domain = "@example.com"
Hirb.disable
domain = "@example.com"
email = "a" *(256 - domain.length) + domain
email
user =User.new(name:"test", email:email, passwoor: "password")
user =User.new(name:"test", email:email, passwoor: "password")
user =User.new(name:"test", email:email, password: "password")
user =User.new(name:"test", email:email, password: "password")
user =User.new(name:"test", email:email, password: "password")
user =User.new(name:"test", email:email, password: "password")
user =User.new(name:"test", email:email, passwordaa: "password")
user =User.new(name:"test", email:email, password: "password")
user.save
user.save
reload!
user.save
user.save
user.save
user.save
exit
domain = "@example.com"
Hirb.disable
domain = "@example.com"
email = "a" *(256 - domain.length) + domain
user =User.new(name:"test", email:email, password: "password")
user.save
user.errors.full_meddages
user.errors.full_messages
user =User.new(name:"test", email:"a@a.a@aa", password: "password")
user.save
user.errors.full_messages
user =User.new(name:"test", email:"a@a.com", password: "password")
user.save
user.last.update(activated:true)
User.last.update(activated:true)
user =User.new(name:"test", email:"a@a.com", password: "password")
pp user
user.save
user.errors.full_messages
User.all
user =User.new(name:"test", email:"AAa@Com", password: "password")
user.save
user.email
exit
User.all
User.all
exit
User.all
exit
User.all
exit
payload = {sub: 1}
Hirb.disable
payload = {sub: 1}
secret_key = Rails.application.credentials.secret_key_base
token = JWT.encode(payload, secret_key)
token
JWT.decode(token,secret_key)
exit
UserAuth.token_issuer
UserAuth.token_audience
exit
Hirb.disable
include UserAuth::TokenCommons
include UserAuth::AuthToken
exit
include UserAuth::TokenCommons
Hirb
Hirb.disable
exit
Hirb.disable
include UserAuth::TokenCommons
encrypt = UserAuth::TokenCommons.encrypt_for(1)
encrypt = UserAuth::TokenCommons.encrypt_for(1)
user_id = UserAuth::TokenCommons.decrypt_for(encrypt)
exit
user = User.first
user = Users.first
user = User.first
Hirb.disable
user = User.first
p user
user.rememder(1)
user.remember(1)

user.forget
reload!
user.forget
token1 = UserAuth::RefreshToken.new(user_id: user.id)
token1
user.refresh
user.reload
user.refresh_jti == token1.payload[:jwt]
user.refresh_jti == token1.payload[:jwi]
user.refresh_jti == token1.payload[:jti]
UserAuth::RefreshToken.new(token: token1.token).entity_for_user
exit
user = User.first
Hirb.disable
user
user.encode_access_token
reload!
user = User.first
user
user.encode_access_token

user.to_refresh_token
user.encode_refresh_token
user.to_refresh_token
encode = user.encode_refresh_token
encode
User.from_refresh_token(encode)
User.from_refresh_token(encode.token)
access_token = user.to_access_token
access_token = user.to_access_token
acc
access_token
User.from_access_token(access_token)
edit
exit
User.all
exit
User.all
exit
User.all
User.all
p User.all
p User.email
ActiveRecord::Base.connection.select_all("select email from users").to_a
ActiveRecord::Base.connection.select_all("select email from usersorder by id").to_a
ActiveRecord::Base.connection.select_all("select email from usersorder by name").to_a
ActiveRecord::Base.connection.select_all("select email from users order by name").to_a
ActiveRecord::Base.connection.select_all("select * from users where id = 1 and activated=true").to_a
ActiveRecord::Base.connection.select_all("select * from users where id =2 and activated=true").to_a
ActiveRecord::Base.connection.select_all("select * from users where id =3 and activated=true").to_a
ActiveRecord::Base.connection.select_all("select email from users order by id").to_a
User.all
User.all
exit
place = Place.new
Hirb.disable
place = Place.new
place.name='苅田園芸'
place.google_place_id='ChIJ-W5F0uw6UDURZZ4gP5e-BNI'
place.save
place.all
Place.all
reload!
place.reviews
review = Review.new
review.place_id = 1
review.google_place_id = "ChIJ-W5F0uw6UDURZZ4gP5e-BNI"
review.comment = "綺麗でした"
review.save!
review.save
review.name = "test review"
review.user_id = "0"
review.save
reload!
review
review.save
reload!
review.save
review.mania_point = 5
review.price_point = 5
review.health_point = 5
review.save
review.errors
review.errors.full_messages
exit
review = Review.new
Hirb.disable
review = Review.new
review.place_id = 1
review.user_id = "0"
review.user_id = 0
review.google_place_id = "ChIJ-W5F0uw6UDURZZ4gP5e-BNI"
review.comment = "綺麗でした"
review.mania_point = 5
review.price_point = 5
review.health_point = 5
review
review.price_point
review.price_point = "5"
review.mania_point = "5"
review.health_point = "5"
review
review.save
review.place
place.review
places.review
places.reviews
place.reviews
place = Place.new
place.reviews
place = Place.find_by(place_id:1)
place = Place.find_by(id:1)
place.reviews
place
review
review.user_id = 1
review.update
review.update(user_id = 1)
review.update(user_id: 1)
reload!
user = User.find_by(id:1)
user
review.user
review.users
reviews.user
review
user = User.find_by(id:1)
user.review
user.reviews
review
place
user.reviews
reload!
review.place
user
review
review.user
exit
review
review = Review.new()
Hirb.disable
review
review = Review.find_vy(user_id:1)
review = Review.find_by(user_id:1)
review
review.user
user = User.find_by(id:1)
user.reviews
Review.find_by(id:1).destory
Review.find_by(id:1).destroy
exit
User.all
reviews = Review.new(mania_point:5)
Hirb.disable
reviews
reviews.health_point = 5
reviews.price_point = 5
reviews
exit
Review.destroy_all
exit
Review.all
Place.all
user = User.find(id:1)
user = User.new(find(id:1))
user = User.new().find(id:1)
user = User.new()
Hirb/disable
Hirb.disable
use = User.find_by(id:1)
use
use.reviews
shop = Place.new().find_by(id:1)
shop = Place.find_by(id:1)
shop.reviews
shop
shop = Place.find_by(id:2)
shop.reviews
exit
places = Place.left_joins(:reviews).all
Hirb.disable
places
puts places
places.first
review = places.first.reviews
review
places = Place.left_joins(:reviews)
review = places.first.reviews
review = Place.include(:reviews)
review = Place.includes(:reviews)
reviews
review
review.first
review.first.review
a = review.first
a.reviews
a.review
places = Place.includes(:reviews)
places.review
places.reviews
places.first
places.first.reviews
places.second.reviews
review = Review.includes(:place)
Hirb.disable
review
review.first.place
review
review.as_join
review.as_json
review.as_json(include: :places)
review.as_json(include: :place)
place = Place.includes(:reviews)
place.as_json
place.as_json(include: :reviews)
review = Review.includes(:places)
review = Review.includes(:place)
exit
ActiveRecord::Base.connection.select_all("SELECT active_storage_blobs.* FROM active_storage_blobs").to_a
ActiveRecord::Base.connection.select_all("SELECT active_storage_attachments.* FROM active_storage_attachments").to_a
review = Review.find_by(id:15)
Hirb.disable
review.rails_blob_path(model.image)
review.rails_blob_path(image)
review.rails_blob_path
review.url_for
app.url_for
exit
review = Review.find_by(id:15)
Hirb.disable
review.image_url
review.image
review.image
review.url_for(:image)
review.url_for(image)
review.
review.url_for(review.image)
exit
reviews = Review.all
Hirb.disable
reviews.order(:update_at :desc)
reviews.order(:update_at desc)
reviews.order(update_at: desc)
reviews.order(update_at: :desc)
reviews.order(updated_at: :desc)
review.order(updated_at: :desc)
reviews.order(updated_at: :desc)
exit
place = Place.includes(reviews: :user)
Hirb
Hirb.disable
place = Place.includes(reviews: :user)
place = Place.includes(:reviews)
place = Place.includes(:reviews).includes(:users)
place = Place.includes(:reviews).includes(:user)
place = Place.includes(reviews: :users)
place = Place.includes(reviews: :user)
place = Place.includes(:reviews).include(:reviews => :user)
place = Place.includes(:reviews).includes(:reviews => :user)
place.as_json(include: {reviews: { include: users }})
place.as_json(include: {reviews: { include: user }})
place
place = Place.includes(:reviews)
reviews = place.reviews
place
exit
place = Place.all
Hirb/.disacle
Hirb/.disable

place = Place.all
place
review = Review.all
review
ActiveRecord::Base.connection.select_all('select * from reviews').to_hash
ActiveRecord::Base.connection.select_all('select * from reviews')
review = Review.all
review.place_id
review = Review.find_by(place_id: 4)
review
exit
reviews = Review.includes(place:[user])
reviews = Review.includes(place:[:user])
Hirb.disable
reviews = Review.includes(place:[:user])
reviews = Review.includes([:place,:user])
place = Place.includes(:reviews)
place = Place.includes(reviews:[:users])
place = Place.includes(reviews:[:user])
exit
review = Review.find_by(params[:id])
review = Review.find_by(id:1)
Hirb.disable
review
review.comment = "rails c  update test"
review.update!
review.update
review.update(comment:"テストrailsC")
review
exit
Hir
Hirb.disable
review = Review.find_by(id:5)
review
review = Review.find_by(id:1)
review
review = Review.includes(:places)
review = Review.includes(:place)
review.place
review.places
review.places
place = Place.find_by(1)
place = Place.find_by(id:1)
reviews = place.reviews
reviews.
reviews.average(:rating)
reviews.average(:rating,:mania_point)

av_reviews = Review.all
av_reviews = av_reviews.place
av_reviews = av_reviews.places
av_reviews
av_reviews.group(:placd_id).average(:rating)
av_reviews.group(:place_id).average(:rating)
av_reviews.group(:place_id).select("AVG(rating) as rating")
av_reviews.group(:place_id).select("AVG(reviews.rating) as rating")
av_reviews.group(:place_id).select("place_id,AVG(reviews.rating) as rating")
av_reviews.group(:place_id).select("place_id,AVG(rating) as rating,AVG(mania_point) as mania_point")
av_reviews.group(:place_id).select("place_id,ROUND(AVG(rating),1) as rating,AVG(mania_point) as mania_point")
av_reviews.where(place_id:3).rating
av_reviews.where(place_id:3)
av_reviews.rating.where(place_id:3)
av_reviews.where(place_id:3)
av_reviews.where(place_id:3).id
av_reviews.group(:place_id).select("place_id,ROUND(AVG(rating),1) as rating,AVG(mania_point) as mania_point")
result = Review.find_by_sql("SELECT place_id, ROUND(AVG(rating), 1) AS rating, AVG(mania_point) AS mania_point FROM reviews GROUP BY place_id")
exit
av_reviews = Review.all.place
av_reviews = Review.all
Hirb.disable
av_reviews = av_reviews.place
av_reviews.group(:place_id).select("place_id,ROUND(AVG(rating),1) as rating,AVG(mania_point) as mania_point")
av_reviews.group(:place_id).select("place_id,AVG(rating) as rating,AVG(mania_point) as mania_point")
av_reviews.group(:place_id).select("place_id,ROUND(AVG(rating),2) as rating,AVG(mania_point) as mania_point")
av_reviews.group(:place_id).select("place_id,ROUND(AVG(rating)::numeric,2) as rating,AVG(mania_point) as mania_point")
av_reviews.group(:place_id).select("place_id,ROUND(AVG(rating)::numeric,1) as rating,AVG(mania_point) as mania_point")
av_reviews = Review.includes([:place,:user])
av_reviews.group(:place_id).select("place_id,ROUND(AVG(rating)::numeric,1) as rating,AVG(mania_point) as mania_point")
av_reviews = Review.includes([:place])
av_reviews.group(:place_id).select("place_id,ROUND(AVG(rating)::numeric,1) as rating,AVG(mania_point) as mania_point")
av_reviews.group(:place_id).select(            "place_id,            ROUND(AVG(rating)::numeric,2) as rating,            ROUND(AVG(mania_point)::numeric,2) as mania_point,            ROUND(AVG(price_point)::numeric,2) as price_point,            ROUND(AVG(health_point)::numeric,2) as health_point"            )
av_reviews.group(:place_id,[place: :name]).select(            "place_id,            ROUND(AVG(rating)::numeric,2) as rating,            ROUND(AVG(mania_point)::numeric,2) as mania_point,            ROUND(AVG(price_point)::numeric,2) as price_point,            ROUND(AVG(health_point)::numeric,2) as health_point"            )
av_reviews.group(:place_id,'places.name').select(            "place_id,            ROUND(AVG(rating)::numeric,2) as rating,            ROUND(AVG(mania_point)::numeric,2) as mania_point,            ROUND(AVG(price_point)::numeric,2) as price_point,            ROUND(AVG(health_point)::numeric,2) as health_point"            )
exit
Rails.application.credentials.dig(:aws, :access_key_id)
Rails.application.credentials.dig(:aws, :secret_access_key)
Rails.application.credentials.dig(:aws, :secret_access_key)
Rails.application.credentials.secret_key_base
exit
place = Place.new(name: nil)
Hirb.disable
place.valid?
relo
relo
reload!
place.valid?
place = Place.new(name: nil)
place.valid?
exit
place = Place.new(name: nil)
Hirb.disable
place.name.valid?
exit
Place.find_by(google_place_id: "ChIJ0_TWrRHuTzURSfDvHGXBjoM")
Place.find_by(google_place_id: "ChIJ0_TWrRHuTzURSfDvHGXBjoM").conxt
Place.find_by(google_place_id: "ChIJ0_TWrRHuTzURSfDvHGXBjoM").connt
Place.find_by(google_place_id: "ChIJ0_TWrRHuTzURSfDvHGXBjoM").present?
exit
uniqueLongitude = Place.find_by(longitude: "132.71488267475482")
Hirb.disable
uniqueLongitude
place = Place.all
place
rspec
exit
uniqueLongitude = Place.find_by(longitude: 132.715).present?
Hirb.disa
Hirb.disable
uniqueLongitude
uniqueLongitude = Place.find_by(name: "ファンガーデンMASAKI").present?
uniqueLongitude = Place.find_by(longitude: 132.715).present?
uniqueLongitude = Place.find_by(name: "ファンガーデンMASAKI").present?
uniqueLongitude = Place.find_by(name: "ファンガーデンMASAKI")
uniqueLongitude.longitude
uniqueLongitude = Place.find_by(longitude: 132.715).present?
uniqueLongitude.longitude
uniqueLongitude = Place.find_by(name: "ファンガーデンMASAKI")

uniqueLongitude = Place.find_by(longitude: 132.71488267475482).present?
exit
isReviewExist = Review.find_by(user_id: 1, place_id: 1).present?
Hirb
Hirb.disable
isR
isReviewExist
exit
review = Review.all
Hirb.disable
review
exit
Hirb.disable
review = Review.all
review
exit
